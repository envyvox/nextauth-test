generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  displayName   String?         @unique
  emailVerified DateTime?
  about         String?
  image         String?
  accessRole    AccessRole      @default(User)
  level         Int             @default(1)
  xp            Int             @default(0)
  location      Location        @default(Capital)
  title         Title           @default(Newbie)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  currencies    UserCurrency[]
  boxes         UserBoxes[]
  seeds         UserSeeds[]
  crops         UserCrops[]
  products      UserProducts[]
  fish          UserFish[]
  gatherings    UserGathering[]
  titles        UserTitle[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserCurrency {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  currency  Currency
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, currency])
}

model UserBoxes {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  box       Box
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, box])
}

model UserSeeds {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  seed      Seed     @relation(fields: [seedId], references: [id])
  seedId    String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, seedId])
}

model UserCrops {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  crop      Crop     @relation(fields: [cropId], references: [id])
  cropId    String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, cropId])
}

model UserProducts {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, productId])
}

model UserFish {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  fish      Fish     @relation(fields: [fishId], references: [id])
  fishId    String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, fishId])
}

model UserGathering {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  gathering   Gathering @relation(fields: [gatheringId], references: [id])
  gatheringId String
  amount      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@id([userId, gatheringId])
}

model UserTitle {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     Title
  createdAt DateTime @default(now())

  @@id([userId, title])
}

model Seed {
  id           String      @id @default(cuid())
  name         String      @unique
  season       Season
  growthDays   Int
  reGrowthDays Int
  isMultiply   Boolean
  price        Int
  crop         Crop?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  userSeeds    UserSeeds[]
}

model Crop {
  id        String      @id @default(cuid())
  name      String      @unique
  price     Int
  seed      Seed        @relation(fields: [seedId], references: [id])
  seedId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  userCrops UserCrops[]
}

model Product {
  id           String         @id @default(cuid())
  name         String         @unique
  price        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  userProducts UserProducts[]
}

model Transit {
  id          String   @id @default(cuid())
  departure   Location
  destination Location
  price       Int

  @@unique([departure, destination])
}

model Fish {
  id            String     @id @default(cuid())
  name          String     @unique
  rarity        FishRarity
  catchWeather  Weather
  catchTimesDay TimesDay
  catchSeason   Season[]
  price         Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  userFish      UserFish[]
}

model Gathering {
  id            String              @id @default(cuid())
  name          String              @unique
  location      Location
  price         Int
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  properties    GatheringProperty[]
  userGathering UserGathering[]
}

model GatheringProperty {
  gathering   Gathering             @relation(fields: [gatheringId], references: [id])
  gatheringId String
  property    GatheringPropertyType
  value       Int

  @@id([gatheringId, property])
}

model WorldState {
  id              String  @id @default(cuid())
  season          Season
  weatherToday    Weather
  weatherTomorrow Weather
}

enum GatheringPropertyType {
  GatheringChance
  GatheringDoubleChance
  GatheringAmount
}

enum FishRarity {
  Common
  Rare
  Epic
  Mythical
  Legendary
}

enum Weather {
  Any
  Clear
  Rain
}

enum Season {
  Any
  Spring
  Summer
  Autumn
  Winter
}

enum TimesDay {
  Any
  Day
  Night
}

enum Currency {
  Ien
  Pearl
}

enum Box {
  Capital
  Garden
  Seaport
  Castle
  Village
}

enum AccessRole {
  User
  Admin
}

enum Location {
  InTransit
  Capital
  Garden
  Seaport
  Castle
  Village
  ExploreGarden
  ExploreCastle
  Fishing
  FieldWatering
  WorkOnContract
}

enum Title {
  Newbie
  Lucky
  ResourcefulCatcher
  DescendantAristocracy
  DescendantOcean
  KeeperGrove
  ReliableWorkaholic
  SereneExcavator
  AgileEarner
  Handyman
  WineSamurai
  StockyFarmer
  SeaPoet
  CulinaryIdol
  Toxic
  KingExcitement
  BelievingInLuck
  FirstSamurai
  Yatagarasu
  HarbingerOfSummer
  Wanderer
}
